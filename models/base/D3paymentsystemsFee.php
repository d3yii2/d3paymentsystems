<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace d3yii2\d3paymentsystems\models\base;

use Yii;
use d3system\yii2\validators\D3TrimValidator;
use d3yii2\d3paymentsystems\models\SysModels;
use yii\db\ActiveQuery;
use yii\db\ActiveRecord;

/**
 * This is the base-model class for table "d3paymentsystems_fee".
 *
 * @property integer $id
 * @property integer $wallet_sys_model_id
 * @property string $from_country
 * @property string $from_type
 * @property string $to_country
 * @property float $sender_fee
 * @property float $receiver_fee
 *
 * @property SysModels $walletSysModel
 * @property string $aliasModel
 */
abstract class D3paymentsystemsFee extends ActiveRecord
{

    /**
    * column from_country ENUM values
    */
    public const FROM_COUNTRY_RU = 'RU';
    public const FROM_COUNTRY_BLR = 'BLR';
    public const FROM_COUNTRY_UA = 'UA';
    public const FROM_COUNTRY_WORLD = 'World';

    /**
    * column from_type ENUM values
    */
    public const FROM_TYPE_TRUE_SKRILL = 'True skrill';
    public const FROM_TYPE_SKRILLER = 'Skriller';
    public const FROM_TYPE_VIP = 'VIP';
    public const FROM_TYPE_MAIN = 'Main';
    public const FROM_TYPE_BNB = 'bnb';

    /**
    * column to_country ENUM values
    */
    public const TO_COUNTRY_RU = 'RU';
    public const TO_COUNTRY_BLR = 'BLR';
    public const TO_COUNTRY_UA = 'UA';
    public const TO_COUNTRY_WORLD = 'World';

    /**
     * @inheritdoc
     */
    public static function tableName(): string
    {
        return 'd3paymentsystems_fee';
    }

    /**
     * @inheritdoc
     */
    public function rules(): array
    {
        return [
            'trimNumbers' => [['id','wallet_sys_model_id','sender_fee','receiver_fee'],D3TrimValidator::class, 'trimOnlyStringValues' => true],
            'required' => [['wallet_sys_model_id', 'from_country', 'from_type', 'to_country', 'sender_fee', 'receiver_fee'], 'required'],
            'enum-from_country' => ['from_country', 'in', 'range' => array_keys(self::optsFromCountry())],
            'enum-from_type' => ['from_type', 'in', 'range' => array_keys(self::optsFromType())],
            'enum-to_country' => ['to_country', 'in', 'range' => array_keys(self::optsToCountry())],
            'decimal-unsigned-4-2' => [
                ['sender_fee', 'receiver_fee'],
                    'number',
                    'numberPattern' => '/^(\+?((\d{1,2})|(\d{0,2}\.\d{0,2})|(\.\d{1,2})))$/',
                    'message' =>  Yii::t('crud', 'Invalid number format')
                ],
            'tinyint Unsigned' => [['wallet_sys_model_id'],'integer' ,'min' => 0 ,'max' => 255],
            'smallint Unsigned' => [['id'],'integer' ,'min' => 0 ,'max' => 65535],
            [['from_country', 'from_type', 'to_country'], 'string'],
            [['sender_fee', 'receiver_fee'], 'number'],
            [['wallet_sys_model_id'], 'exist', 'skipOnError' => true, 'targetClass' => SysModels::class, 'targetAttribute' => ['wallet_sys_model_id' => 'id']]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels(): array
    {
        return [
            'id' => Yii::t('d3paymentsystems', 'ID'),
            'wallet_sys_model_id' => Yii::t('d3paymentsystems', 'Wallet'),
            'from_country' => Yii::t('d3paymentsystems', 'From country'),
            'from_type' => Yii::t('d3paymentsystems', 'From Type'),
            'to_country' => Yii::t('d3paymentsystems', 'To country'),
            'sender_fee' => Yii::t('d3paymentsystems', 'Sender fee'),
            'receiver_fee' => Yii::t('d3paymentsystems', 'Receiver fee'),
        ];
    }

    /**
     * @return ActiveQuery
     */
    public function getWalletSysModel(): ActiveQuery
    {
        return $this
            ->hasOne(SysModels::class, ['id' => 'wallet_sys_model_id'])
            ->inverseOf('d3paymentsystemsFees');
    }


    /**
     * get column from_country enum value label
     * @param string $value
     * @return string
     */
    public static function getFromCountryValueLabel(string $value): string
    {
        if (!$value) {
            return '';
        }
        $labels = self::optsFromCountry();
        return $labels[$value] ?? $value;
    }

    /**
     * column from_country ENUM value labels
     * @return string[]
     */
    public static function optsFromCountry(): array
    {
        return [
            self::FROM_COUNTRY_RU => Yii::t('d3paymentsystems', 'RU'),
            self::FROM_COUNTRY_BLR => Yii::t('d3paymentsystems', 'BLR'),
            self::FROM_COUNTRY_UA => Yii::t('d3paymentsystems', 'UA'),
            self::FROM_COUNTRY_WORLD => Yii::t('d3paymentsystems', 'World'),
        ];
    }

    /**
     * get column from_type enum value label
     * @param string $value
     * @return string
     */
    public static function getFromTypeValueLabel(string $value): string
    {
        if (!$value) {
            return '';
        }
        $labels = self::optsFromType();
        return $labels[$value] ?? $value;
    }

    /**
     * column from_type ENUM value labels
     * @return string[]
     */
    public static function optsFromType(): array
    {
        return [
            self::FROM_TYPE_TRUE_SKRILL => Yii::t('d3paymentsystems', 'True skrill'),
            self::FROM_TYPE_SKRILLER => Yii::t('d3paymentsystems', 'Skriller'),
            self::FROM_TYPE_VIP => Yii::t('d3paymentsystems', 'VIP'),
            self::FROM_TYPE_MAIN => Yii::t('d3paymentsystems', 'Main'),
            self::FROM_TYPE_BNB => Yii::t('d3paymentsystems', 'bnb'),
        ];
    }

    /**
     * get column to_country enum value label
     * @param string $value
     * @return string
     */
    public static function getToCountryValueLabel(string $value): string
    {
        if (!$value) {
            return '';
        }
        $labels = self::optsToCountry();
        return $labels[$value] ?? $value;
    }

    /**
     * column to_country ENUM value labels
     * @return string[]
     */
    public static function optsToCountry(): array
    {
        return [
            self::TO_COUNTRY_RU => Yii::t('d3paymentsystems', 'RU'),
            self::TO_COUNTRY_BLR => Yii::t('d3paymentsystems', 'BLR'),
            self::TO_COUNTRY_UA => Yii::t('d3paymentsystems', 'UA'),
            self::TO_COUNTRY_WORLD => Yii::t('d3paymentsystems', 'World'),
        ];
    }
    /**
    * ENUM field values
    */
    /**
     * @return bool
     */
    public function isFromCountryRU(): bool
    {
        return $this->from_country === self::FROM_COUNTRY_RU;
    }

     /**
     * @return void
     */
    public function setFromCountryRU(): void
    {
        $this->from_country = self::FROM_COUNTRY_RU;
    }
    /**
     * @return bool
     */
    public function isFromCountryBLR(): bool
    {
        return $this->from_country === self::FROM_COUNTRY_BLR;
    }

     /**
     * @return void
     */
    public function setFromCountryBLR(): void
    {
        $this->from_country = self::FROM_COUNTRY_BLR;
    }
    /**
     * @return bool
     */
    public function isFromCountryUA(): bool
    {
        return $this->from_country === self::FROM_COUNTRY_UA;
    }

     /**
     * @return void
     */
    public function setFromCountryUA(): void
    {
        $this->from_country = self::FROM_COUNTRY_UA;
    }
    /**
     * @return bool
     */
    public function isFromCountryWorld(): bool
    {
        return $this->from_country === self::FROM_COUNTRY_WORLD;
    }

     /**
     * @return void
     */
    public function setFromCountryWorld(): void
    {
        $this->from_country = self::FROM_COUNTRY_WORLD;
    }
    /**
     * @return bool
     */
    public function isFromTypeTrueSkrill(): bool
    {
        return $this->from_type === self::FROM_TYPE_TRUE_SKRILL;
    }

     /**
     * @return void
     */
    public function setFromTypeTrueSkrill(): void
    {
        $this->from_type = self::FROM_TYPE_TRUE_SKRILL;
    }
    /**
     * @return bool
     */
    public function isFromTypeSkriller(): bool
    {
        return $this->from_type === self::FROM_TYPE_SKRILLER;
    }

     /**
     * @return void
     */
    public function setFromTypeSkriller(): void
    {
        $this->from_type = self::FROM_TYPE_SKRILLER;
    }
    /**
     * @return bool
     */
    public function isFromTypeVIP(): bool
    {
        return $this->from_type === self::FROM_TYPE_VIP;
    }

     /**
     * @return void
     */
    public function setFromTypeVIP(): void
    {
        $this->from_type = self::FROM_TYPE_VIP;
    }
    /**
     * @return bool
     */
    public function isFromTypeMain(): bool
    {
        return $this->from_type === self::FROM_TYPE_MAIN;
    }

     /**
     * @return void
     */
    public function setFromTypeMain(): void
    {
        $this->from_type = self::FROM_TYPE_MAIN;
    }
    /**
     * @return bool
     */
    public function isFromTypeBnb(): bool
    {
        return $this->from_type === self::FROM_TYPE_BNB;
    }

     /**
     * @return void
     */
    public function setFromTypeBnb(): void
    {
        $this->from_type = self::FROM_TYPE_BNB;
    }
    /**
     * @return bool
     */
    public function isToCountryRU(): bool
    {
        return $this->to_country === self::TO_COUNTRY_RU;
    }

     /**
     * @return void
     */
    public function setToCountryRU(): void
    {
        $this->to_country = self::TO_COUNTRY_RU;
    }
    /**
     * @return bool
     */
    public function isToCountryBLR(): bool
    {
        return $this->to_country === self::TO_COUNTRY_BLR;
    }

     /**
     * @return void
     */
    public function setToCountryBLR(): void
    {
        $this->to_country = self::TO_COUNTRY_BLR;
    }
    /**
     * @return bool
     */
    public function isToCountryUA(): bool
    {
        return $this->to_country === self::TO_COUNTRY_UA;
    }

     /**
     * @return void
     */
    public function setToCountryUA(): void
    {
        $this->to_country = self::TO_COUNTRY_UA;
    }
    /**
     * @return bool
     */
    public function isToCountryWorld(): bool
    {
        return $this->to_country === self::TO_COUNTRY_WORLD;
    }

     /**
     * @return void
     */
    public function setToCountryWorld(): void
    {
        $this->to_country = self::TO_COUNTRY_WORLD;
    }
}
